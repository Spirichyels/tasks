Методы у промисов
Промисы предоставляют методы для обработки результатов операций. Основные методы промисов включают:

.then(onFulfilled, onRejected): Метод, вызываемый после выполнения промиса. Он принимает две функции обратного вызова (callback): первая выполняется при успешном выполнении промиса и получает результат, вторая выполняется в случае отклонения промиса и получает информацию об ошибке.

.catch(onRejected): Метод, вызываемый в случае отклонения промиса. Он принимает функцию обратного вызова, которая обрабатывает информацию об ошибке.

.finally(onFinally): Метод, вызываемый независимо от того, выполнен ли промис или отклонен. Он принимает функцию обратного вызова, которая будет выполнена после завершения промиса.

Пример использования промисов:


const fetchData = () => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const data = "Результат асинхронной операции";
      // resolve(data); // Промис выполнен успешно
      reject("Ошибка при выполнении операции"); // Промис отклонен
    }, 2000);
  });
};

fetchData()
  .then((result) => {
    console.log("Результат:", result);
  })
  .catch((error) => {
    console.error("Ошибка:", error);
  })
  .finally(() => {
    console.log("Завершение операции");
  });
В этом примере fetchData() представляет асинхронную операцию, которая возвращает промис. После выполнения операции промис либо переходит в состояние "Выполнено" и вызывается метод .then(), либо переходит в состояние "Отклонено" и вызывается метод .catch(). Метод .finally() вызывается в любом случае после завершения промиса.

Промисы значительно облегчают асинхронное программирование и обработку результатов асинхронных операций, позволяя использовать цепочки .then() и .catch() для последовательного выполнения операций и обработки ошибок.

