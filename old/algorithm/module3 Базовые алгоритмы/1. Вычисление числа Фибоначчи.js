/*

Вычисление числа Фибоначчи
Реализуйте функцию fibonacci(n), которая возвращает n-ное число Фибоначчи.

Числа Фибоначчи определяются следующим образом: F(0) = 0, F(1) = 1, и для всех n больше 1, F(n) = F(n-1) + F(n-2).

Функция:
0 <= n <= 30



Базовый Алгоритм
Конечно, вот решение задачи нахождения числа Фибоначчи с пояснением:

Решение с Пояснением
Для нахождения числа Фибоначчи, которое является суммой двух предыдущих чисел 
Фибоначчи, мы можем воспользоваться методом динамического программирования. 
Создадим массив, где будем хранить значения уже вычисленных чисел Фибоначчи. 
Изначально этот массив будет содержать два базовых 
значения: fib[0] = 0 и fib[1] = 1, так как первые два числа Фибоначчи 
равны 0 и 1 соответственно.

Затем мы используем цикл, чтобы вычислить числа Фибоначчи от 2 до n. 
На каждом шаге цикла вычисляем следующее число Фибоначчи как сумму двух 
предыдущих чисел Фибоначчи и сохраняем его в массиве fib. После завершения цикла мы можем вернуть fib[n] как результат.

Временная сложность этого решения составляет O(n), где n - это число Фибоначчи, которое мы хотим вычислить.

*/

/**
 * @param {number} n - Неотрицательное целое число, для которого нужно вычислить число Фибоначчи.
 * @return {number} - n-ное число Фибоначчи.
 */
function fibonacci(n) {
  // Создаем массив для хранения значений Фибоначчи
  let fib = [];
  fib[0] = 0; // Первое число Фибоначчи
  fib[1] = 1; // Второе число Фибоначчи

  // Вычисляем числа Фибоначчи от 2 до n
  for (let i = 2; i <= n; i++) {
    // Фибоначчи - это сумма двух предыдущих чисел Фибоначчи
    fib[i] = fib[i - 1] + fib[i - 2];
  }

  // Возвращаем n-ное число Фибоначчи
  return fib[n];
}

// Примеры использования функции
console.log(fibonacci(0)); // Вывод: 0
console.log(fibonacci(1)); // Вывод: 1
console.log(fibonacci(2)); // Вывод: 1
console.log(fibonacci(5)); // Вывод: 5
console.log(fibonacci(10)); // Вывод: 55

/*
Алгоритм с кешированием
Кеширование (или мемоизация) - это техника оптимизации, 
при которой результаты уже вычисленных операций сохраняются 
в памяти и возвращаются при последующих вызовах функции с теми же входными данными. 
В случае задачи вычисления числа Фибоначчи, кеширование помогает избежать 
избыточных вычислений и улучшает производительность функции.

В JavaScript для реализации кеширования можно использовать 
объект для хранения уже вычисленных значений Фибоначчи. 
Вот как это можно сделать:


Пояснение:

Функция fibonacci(n, memo = {}) принимает параметр n - число Фибоначчи, 
которое нужно вычислить, и объект memo - кеш, в котором сохраняются уже вычисленные значения.
Перед вычислением значения для n, 
функция проверяет, есть ли это значение в кеше (if (n in memo)). 
Если значение уже вычислено, оно возвращается из кеша, 
что предотвращает избыточные вычисления.
Если значение не найдено в кеше, функция вычисляет 
число Фибоначчи для n как сумму результатов для n-1 и n-2. 
Затем это значение сохраняется в кеше для будущих вызовов функции с тем же параметром n.
Использование кеша позволяет избежать лишних вычислений 
и значительно ускоряет выполнение функции для больших значений n.

*/

/**
 * @param {number} n - Неотрицательное целое число, для которого нужно вычислить число Фибоначчи.
 * @return {number} - n-ное число Фибоначчи.
 */
function fibonacci(n, memo = {}) {
  // Проверяем, есть ли значение в кеше
  if (n in memo) {
    return memo[n];
  }

  // Базовые случаи: F(0) = 0 и F(1) = 1
  if (n === 0) {
    return 0;
  }
  if (n === 1) {
    return 1;
  }

  // Вычисляем число Фибоначчи и сохраняем в кеше
  memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);
  return memo[n];
}

// Примеры использования функции с кешированием
console.log(fibonacci(5)); // Вывод: 5 (значение сохранено в кеше, не вычисляется повторно)
console.log(fibonacci(10)); // Вывод: 55 (вычисляется один раз и сохраняется в кеше)
