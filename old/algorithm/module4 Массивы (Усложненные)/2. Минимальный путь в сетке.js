/*

Минимальный путь в сетке
Дана сетка m x n, заполненная неотрицательными числами. Найдите путь от верхнего левого угла до нижнего правого угла, который минимизирует сумму всех чисел вдоль этого пути.

Примечание: Вы можете двигаться только вниз или вправо в любой момент времени.

Пример 1:



**Ввод:** сетка = [[1,3,1],[1,5,1],[4,2,1]]
**Вывод:** 7
**Объяснение:** Путь 1 → 3 → 1 → 1 → 1 минимизирует сумму.
Пример 2:

**Ввод:** сетка = [[1,2,3],[4,5,6]]
**Вывод:** 12
Ограничения:

m == длина сетки
n == длина сетки[i]
1 <= m, n <= 200
0 <= сетка[i][j] <= 200
Алгоритм 1
Для решения данной задачи можно использовать динамическое программирование.

Создадим двумерный массив dp размером m x n, где dp[i][j] будет представлять минимальную сумму чисел на пути от верхнего левого угла до клетки (i, j).

Изначально заполним первый столбец и первую строку массива dp. Для первого столбца значения dp[i][0] будут равны сумме чисел на пути от верхнего левого угла до клетки (i, 0). Аналогично, для первой строки значения dp[0][j] будут равны сумме чисел на пути от верхнего левого угла до клетки (0, j).

Затем воспользуемся следующим рекуррентным соотношением для заполнения остальных клеток массива dp: dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]), где grid[i][j] - число в клетке (i, j).

Таким образом, после заполнения массива dp последнее значение dp[m-1][n-1] будет представлять минимальную сумму чисел на пути от верхнего левого угла до нижнего правого угла.

Возвращаем dp[m-1][n-1] в качестве ответа.


*/

function minPathSum(grid) {
  const m = grid.length;
  const n = grid[0].length;

  // Создаем двумерный массив dp с размерами m x n
  const dp = new Array(m).fill(0).map(() => new Array(n).fill(0));

  // Заполняем первую строку dp суммами значений в grid
  for (let j = 0; j < n; j++) {
    if (j === 0) {
      dp[0][j] = grid[0][j];
    } else {
      dp[0][j] = grid[0][j] + dp[0][j - 1];
    }
  }

  // Заполняем первый столбец dp суммами значений в grid
  for (let i = 0; i < m; i++) {
    if (i === 0) {
      dp[i][0] = grid[i][0];
    } else {
      dp[i][0] = grid[i][0] + dp[i - 1][0];
    }
  }

  // Заполняем остальные значения dp
  for (let i = 1; i < m; i++) {
    for (let j = 1; j < n; j++) {
      dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);
    }
  }

  // Возвращаем значение в нижем правом углу dp
  return dp[m - 1][n - 1];
}

// Примеры тестов
console.log(
  minPathSum([
    [1, 3, 1],
    [1, 5, 1],
    [4, 2, 1],
  ])
); // 7
console.log(
  minPathSum([
    [1, 2, 3],
    [4, 5, 6],
  ])
); // 12
