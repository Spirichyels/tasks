/*
Проверка доски Судоку
Определить, является ли доска Судоку размером 9 x 9 действительной. Только заполненные ячейки должны быть проверены в соответствии со следующими правилами:

Каждая строка должна содержать цифры от 1 до 9 без повторений.
Каждый столбец должен содержать цифры от 1 до 9 без повторений.
Каждый из девяти 3 x 3 подквадратов сетки должен содержать цифры от 1 до 9 без повторений.
Примечание:

Доска Судоку (частично заполненная) может быть действительной, но не обязательно разрешимой.
Только заполненные ячейки должны быть проверены в соответствии с упомянутыми правилами.
Пример 1:



**Вход:** board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
**Выход:** true

Пример 2:

**Вход**: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
**Выход:** false
**Объяснение:** То же самое, что и в Примере 1, кроме того, что **5** в верхнем левом углу заменено на **8**. Поскольку в верхнем левом подквадрате 3x3 две 8, он недействителен.

Ограничения:

board.length == 9
board[i].length == 9
board[i][j] является цифрой 1-9 или '.'.
Алгоритм 1
Для решения этой задачи нам необходимо проверить, является ли заданная доска Судоку действительной.

Правила Судоку гласят:

Каждая строка должна содержать только цифры от 1 до 9 без повторений.
Каждый столбец должен содержать только цифры от 1 до 9 без повторений.
Каждый из девяти '3 x 3' подквадратов должен содержать только цифры от 1 до 9 без повторений.
Для проверки каждого из этих правил мы можем использовать три набора соответствующих флагов.

Первый набор флагов будет отслеживать наличие числа в каждой строке. Каждый раз, когда мы встречаем число в строке, мы проверяем, появлялось ли это число ранее в текущей строке. Если да, то доска является недействительной. Если нет, то мы устанавливаем соответствующий флаг для этого числа.

Второй набор флагов будет отслеживать наличие числа в каждом столбце. Каждый раз, когда мы встречаем число в столбце, мы проверяем, появлялось ли это число ранее в текущем столбце. Если да, то доска является недействительной. Если нет, то мы устанавливаем соответствующий флаг для этого числа.

Третий набор флагов будет отслеживать наличие числа в каждом подквадрате 3x3. Мы будем использовать блок кода i//3 * 3 + j//3, чтобы определить индекс текущего подквадрата 3x3. Каждый раз, когда мы встречаем число в подквадрате 3x3, мы проверяем, появлялось ли это число ранее в текущем подквадрате. Если да, то доска является недействительной. Если нет, то мы устанавливаем соответствующий флаг для этого числа.

В конце проверки всех чисел в доске мы проверяем все флаги. Если флаг для какого-либо числа не был установлен, то доска является недействительной. Если все флаги были установлены, то доска является действительной.

Таким образом, мы можем написать алгоритм, который будет выполнять описанную выше проверку для каждой строки, столбца и подквадрата 3x3 доски Судоку.



*/

const isValidSudoku = (board) => {
  // Проверка строк
  for (let i = 0; i < 9; i++) {
    const rowSet = new Set();
    for (let j = 0; j < 9; j++) {
      if (board[i][j] !== ".") {
        if (rowSet.has(board[i][j])) {
          return false;
        }
        rowSet.add(board[i][j]);
      }
    }
  }

  // Проверка столбцов
  for (let j = 0; j < 9; j++) {
    const colSet = new Set();
    for (let i = 0; i < 9; i++) {
      if (board[i][j] !== ".") {
        if (colSet.has(board[i][j])) {
          return false;
        }
        colSet.add(board[i][j]);
      }
    }
  }

  // Проверка подквадратов 3x3
  for (let k = 0; k < 9; k++) {
    const subgridSet = new Set();
    for (let i = Math.floor(k / 3) * 3; i < Math.floor(k / 3) * 3 + 3; i++) {
      for (let j = (k % 3) * 3; j < (k % 3) * 3 + 3; j++) {
        if (board[i][j] !== ".") {
          if (subgridSet.has(board[i][j])) {
            return false;
          }
          subgridSet.add(board[i][j]);
        }
      }
    }
  }

  return true;
};
