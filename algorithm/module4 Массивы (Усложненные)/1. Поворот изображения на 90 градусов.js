/*

Поворот изображения на 90 градусов
Дана матрица изображения размером n x n. Необходимо повернуть изображение на 90 градусов по часовой стрелке.

Нужно повернуть изображение на месте (in-place). Это означает, что нужно изменить входную 2D матрицу непосредственно. НЕ выделяйте дополнительную 2D матрицу и не проводите поворот.

 

Пример 1:



**Вход:** matrix = [[1,2,3],[4,5,6],[7,8,9]]
**Выход:** [[7,4,1],[8,5,2],[9,6,3]]

Пример 2:



**Вход:** matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
**Выход:** [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

 

Ограничения:

n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000
Алгоритм 1
Для решения этой задачи мы можем разделить проблему на два этапа:

Транспонирование матрицы.
Обращение порядка элементов в каждой строке.
Транспонирование матрицы означает замену строк на столбцы и столбцов на строки. Мы можем достичь этого, обменяв элементы matrix[i][j] и matrix[j][i] для каждой пары индексов (i, j) только для тех случаев, когда i < j.

После выполнения транспонирования нам нужно поменять порядок элементов в каждой строке, чтобы получить поворот на 90 градусов. Мы можем достичь этого, поменяв местами элементы matrix[i][j] и matrix[i][n-j-1], где n - размерность матрицы, для каждой пары индексов (i, j).

Используя эти два этапа, мы можем повернуть матрицу на 90 градусов по часовой стрелке. Оба этапа будут выполняться "на месте", без выделения дополнительной памяти или создания новой матрицы.

На практике это означает, что мы будем использовать две вложенные цикла for для обращения порядка элементов в каждой строке, а затем еще два вложенных цикла for для транспонирования матрицы, меняя местами элементы matrix[i][j] и matrix[j][i] только для тех случаев, когда i < j.



*/
const rotateImage = (matrix) => {
  const n = matrix.length;

  // Транспонирование матрицы
  for (let i = 0; i < n; i++) {
    for (let j = i; j < n; j++) {
      const temp = matrix[i][j];
      matrix[i][j] = matrix[j][i];
      matrix[j][i] = temp;
    }
  }

  // Переворачивание столбцов матрицы
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < Math.floor(n / 2); j++) {
      const temp = matrix[i][j];
      matrix[i][j] = matrix[i][n - 1 - j];
      matrix[i][n - 1 - j] = temp;
    }
  }

  return matrix;
};
