/*Дана строка s. Вернуть самую длинную палиндромную подстроку в s.


Пример 1:
**Ввод:** s = "babad"
**Вывод:** "bab"
**Пояснение:** "aba" также является правильным ответом.

Пример 2:
**Ввод:** s = "cbbd"
**Вывод:** "bb" 

Ограничения:
1 <= s.length <= 1000
s состоит только из цифр и английских букв


Алгоритм
Шаги алгоритма:

	1. Проверяем, не является ли строка пустой. 
Если да, то сразу возвращаем пустую строку.
	2. Инициализируем переменную longest для хранения самой длинной 
палиндромной подстроки.
Начинаем итерацию по каждому символу в строке.
	3. Для каждого символа ищем палиндромы с нечетными длинами, центром в текущем символе.
	4. Для каждой пары соседних символов ищем палиндромы с четными длинами, центром между ними.
	5. Выбираем самый длинный палиндром из найденных на шагах 4 и 5.
	6. Обновляем переменную longest, если текущий палиндром длиннее текущего longest.
	7. По завершении итерации возвращаем переменную longest как результат.
	8. Для поиска палиндромов используется функция expandAroundCenter, которая расширяет палиндром влево и вправо от заданных индексов.
Такой алгоритм позволяет найти самую длинную палиндромную подстроку в строке, обходя все возможные варианты расширения палиндрома от центра.

*/

function longestPalindrome(s) {
  // Шаг 1: Проверка на пустую строку
  if (s.length === 0) {
    return "";
  }

  let longest = "";

  // Шаг 2: Итерация по каждому символу в строке
  for (let i = 0; i < s.length; i++) {
    // Шаг 3: Поиск палиндрома с центром в текущем символе (нечетная длина)
    const palindromeOdd = expandAroundCenter(s, i, i);
    // Шаг 4: Поиск палиндрома с центром между текущим и следующим символом (четная длина)
    const palindromeEven = expandAroundCenter(s, i, i + 1);

    // Выбираем самый длинный палиндром из найденных
    const currentLongest =
      palindromeOdd.length > palindromeEven.length
        ? palindromeOdd
        : palindromeEven;

    // Обновляем самый длинный палиндром, если текущий длиннее
    if (currentLongest.length > longest.length) {
      longest = currentLongest;
    }
  }

  // Шаг 5: Возврат самой длинной палиндромной подстроки
  return longest;
}

function expandAroundCenter(s, left, right) {
  // Шаг 1: Поиск палиндрома с текущими left и right
  while (left >= 0 && right < s.length && s[left] === s[right]) {
    left--;
    right++;
  }

  // Шаг 2: Возврат найденного палиндрома
  return s.slice(left + 1, right);
}

// Примеры использования:
const s1 = "babad";
console.log(longestPalindrome(s1)); // Вывод: "bab" или "aba"

const s2 = "cbbd";
console.log(longestPalindrome(s2)); // Вывод: "bb"

const s3 = "cbfdokhnhkfgjmovkdooodffbghbd";
console.log(longestPalindrome(s3)); // Вывод: "bb"
