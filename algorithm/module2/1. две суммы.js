/*

Две суммы
Дан массив целых чисел nums и целое число target. 
Вернуть индексы двух чисел таких, что их сумма равна target.

Вы можете предположить, что у каждого ввода ровно одно решение, 
и вы не можете использовать один элемент дважды.

Вы можете вернуть ответ в любом порядке.

Примеры
Пример 1:

**Вход:** nums = [2,7,11,15], target = 9
**Вывод:** [0,1]
**Объяснение:** Поскольку nums[0] + nums[1] == 9, мы возвращаем [0, 1].
Пример 2:

**Вход:** nums = [3,2,4], target = 6
**Вывод:** [1,2]
Пример 3:

**Вход:** nums = [3,3], target = 6
**Вывод:** [0,1]
Ограничения
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Существует только один правильный ответ.
Фоллоу-ап
Можете ли вы разработать алгоритм с временной сложностью O(n2)? 


Алгоритм 1
Алгоритм

Пройдитесь по каждому элементу 
xxx и найдите значение, которое равно разности между целью 
и xxx (target−xtarget - xtarget−x).

Анализ сложности

Временная сложность: O(n2).
Для каждого элемента мы пытаемся найти его комлемент, 
перебирая остальной массив, что занимает O(n) времени. 
Следовательно, временная сложность равна O(n2).

Пространственная сложность: O(1).
Затрачиваемое пространство не зависит от размера входного массива, 
поэтому используется только константное пространство.

*/

//Реализация Алгоритм 1

function twoSum1(nums, target) {
  for (let i = 0; i < nums.length; i++) {
    for (let j = i + 1; j < nums.length; j++) {
      if (nums[j] === target - nums[i]) {
        return [i, j];
      }
    }
  }
  return null;
}

/*
Алгоритм 2
мы можем сделать это за один проход. 
Во время итерации и вставки элементов в хеш-таблицу мы также проверяем, 
существует ли уже комплимент текущего элемента в хеш-таблице. 
Если он существует, мы нашли решение и сразу возвращаем индексы.

Анализ сложности

Временная сложность: O(n).
Мы проходимся по списку, содержащему n элементов, только один раз. 
Каждая проверка в таблице занимает только O(1) времени.

Пространственная сложность: O(n).
Дополнительное пространство, необходимое, 
зависит от количества элементов, 
хранящихся в хеш-таблице, которая хранит не более n элементов.

*/

//Реализация

function twoSum2(nums, target) {
  let map = new Map();
  for (let i = 0; i < nums.length; i++) {
    let complement = target - nums[i];
    if (map.has(complement)) {
      return [map.get(complement), i];
    }
    map.set(nums[i], i);
  }
  return null;
}

console.log(twoSum2([2, 7, 11, 15], 9));
