/*

Количество способов подняться по лестнице
Ты поднимаешься по лестнице. Чтобы достичь верха, нужно совершить n шагов.

Каждый раз ты можешь подняться на 1 или 2 шага. Сколько различных способов существует, чтобы подняться на верх?

Пример 1:

**Входные данные:** n = 2
**Результат:** 2
**Объяснение:** Существует два способа подняться на верх.
1. 1 шаг + 1 шаг
2. 2 шага
Пример 2:

**Входные данные:** n = 3
**Результат:** 3
**Объяснение:** Существует три способа подняться на верх.
1. 1 шаг + 1 шаг + 1 шаг
2. 1 шаг + 2 шага
3. 2 шага + 1 шаг
Ограничения:

1 <= n <= 45
Алгоритм 1
Задача заключается в том, чтобы определить количество способов подняться на 
верх лестницы, совершая шаги по одному или два за раз.

Мы можем подняться на верх лестницы, начиная либо с одного шага, 
либо с двух шагов. Когда мы начинаем с одного шага, нам остается только подняться на оставшиеся n-1 шагов. Когда мы начинаем с двух шагов, нам остается подняться на оставшиеся n-2 шага.

Таким образом, общее количество способов подняться на верх лестницы 
будет равно сумме количества способов подняться на n-1 шаг и n-2 шага.

Мы можем использовать рекурсию, чтобы решить эту задачу. 
Базовый случай будет состоять из двух случаев: когда n равно 1 или 2. В этих случаях, количество способов подняться на верх лестницы будет равно 1 и 2 соответственно.

Если n больше 2, мы можем вызвать функцию рекурсивно для n-1 и n-2 и сложить результаты.

Также мы можем использовать динамическое программирование, 
чтобы избежать повторных вычислений. Мы можем создать массив dp размером n и заполнить его значениями, начиная с базовых случаев. Затем мы можем использовать этот массив, чтобы хранить промежуточные результаты, когда вызываем функцию рекурсивно.

Таким образом, мы сможем решить задачу, 
определяя количество способов подняться на верх лестницы для данного n.

*/

function climbStairs(n) {
  if (n === 1) {
    return 1;
  }
  if (n === 2) {
    return 2;
  }

  let dp = new Array(n + 1);
  dp[1] = 1;
  dp[2] = 2;

  for (let i = 3; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2];
  }

  return dp[n];
}

console.log(climbStairs(2)); // 2
console.log(climbStairs(3)); // 3
