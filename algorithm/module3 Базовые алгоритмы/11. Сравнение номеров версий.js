/*


Сравнение номеров версий
Учитывая два номера версий, version1 и version2, сравните их.

Номера версий состоят из одного или нескольких номеров редакции, объединенных точкой '.'. Каждая редакция состоит из цифр и может содержать ведущие нули. Каждая редакция содержит по крайней мере один символ. Редакции индексируются с нуля слева направо, при этом левая редакция - редакция 0, следующая редакция - редакция 1 и так далее. Например, 2.5.33 и 0.1 являются допустимыми номерами версий.

Для сравнения номеров версий сравните их редакции в порядке слева направо. Редакции сравниваются с использованием их целочисленного значения с игнорированием ведущих нулей. Это означает, что редакции 1 и 001 считаются равными. Если номер версии не указывает редакцию по индексу, то считайте редакцию равной 0. Например, версия 1.0 меньше, чем версия 1.1, потому что их редакции 0 равны, но их редакции 1 соответственно равны 0 и 1, и 0 < 1.

Вернуть следующее:

Если version1 < version2, вернуть -1.
Если version1 > version2, вернуть 1.
В противном случае вернуть 0.
Пример 1:

**Ввод:** version1 = "1.01", version2 = "1.001"
**Вывод:** 0
**Объяснение:** Если игнорировать ведущие нули, то и "01", и "001" представляют одно и то же целое число "1".
Пример 2:

**Ввод:** version1 = "1.0", version2 = "1.0.0"
**Вывод:** 0
**Объяснение:** версия 1 не указывает редакцию 2, поэтому она считается "0".
Пример 3:

**Ввод:** version1 = "0.1", version2 = "1.1"
**Вывод:** -1
**Объяснение:** редакция 0 версии 1 равна "0", тогда как редакция 0 версии 2 равна "1". 0 < 1, поэтому версия 1 < версии 2.
Ограничения:

1 <= version1.length, version2.length <= 500
version1 и version2 содержат только цифры и '.'.
version1 и version2 являются допустимыми номерами версий.
Все указанные редакции в version1 и version2 могут быть сохранены в 32-битном целом числе.
Алгоритм 1
Для решения этой задачи нужно сравнивать редакции номеров версий version1 и version2 по очереди, начиная с самой левой редакции.

Разделяем номера версий на редакции, используя разделитель '.'.
Сравниваем редакции по очереди:
Если в обоих номерах версий остались еще редакции, сравниваем их целочисленные значения, игнорируя ведущие нули.
Если в одном из номеров версий закончились редакции, считаем отсутствующие редакции равными 0.
Если найденная редакция в version1 меньше редакции в version2, возвращаем -1.
Если найденная редакция в version1 больше редакции в version2, возвращаем 1.
Если все редакции совпадают, значит номера версий равны и возвращаем 0.

*/

function compareVersion(version1, version2) {
  let v1 = version1.split(".");
  let v2 = version2.split(".");

  // Добавляем нули в конец короткой версии, чтобы их можно было одинаково сравнить
  while (v1.length < v2.length) {
    v1.push("0");
  }
  while (v2.length < v1.length) {
    v2.push("0");
  }

  // Сравниваем редакции по порядку
  for (let i = 0; i < v1.length; i++) {
    let num1 = parseInt(v1[i]);
    let num2 = parseInt(v2[i]);

    if (num1 < num2) {
      return -1;
    } else if (num1 > num2) {
      return 1;
    }
  }

  // Все редакции равны
  return 0;
}

// Примеры использования
console.log(compareVersion("1.01", "1.001")); // 0
console.log(compareVersion("1.0", "1.0.0")); // 0
console.log(compareVersion("0.1", "1.1")); // -1
