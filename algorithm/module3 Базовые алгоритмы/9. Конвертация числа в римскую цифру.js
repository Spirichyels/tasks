/*
Конвертация числа в римскую цифру
Римские цифры представлены семью различными символами: I, V, X, L, C, D и M.

**Символ**       **Значение**
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
Например, 2 записывается как II в римских цифрах, просто две единицы сложены вместе. 12 записывается как XII, что означает X + II. Число 27 записывается как XXVII, что означает XX + V + II.

Римские цифры обычно записываются от большего к меньшему слева направо. Однако, число четыре не записывается как IIII. Вместо этого, число 4 записывается как IV. Потому что единица стоит перед пятью, мы вычитаем ее и получаем четыре. Тот же принцип применяется к числу девять, которое записывается как IX. Есть шесть случаев, в которых используется вычитание:

I может стоять перед V (5) и X (10), чтобы получить 4 и 9.
X может стоять перед L (50) и C (100), чтобы получить 40 и 90.
C может стоять перед D (500) и M (1000), чтобы получить 400 и 900.
Дано целое число, конвертируйте его в римскую цифру.

Пример 1:

**Ввод:** num = 3
**Вывод:** "III"
**Объяснение:** 3 представляется тремя единицами.

Пример 2:

**Ввод:** num = 58
**Вывод:** "LVIII"
**Объяснение:** L = 50, V = 5, III = 3.

Пример 3:

**Ввод:** num = 1994
**Вывод:** "MCMXCIV"
**Объяснение:** M = 1000, CM = 900, XC = 90 и IV = 4.

Ограничения:

1 <= num <= 3999
Алгоритм 1
Дано целое число num. Нам требуется сконвертировать его в римскую цифру.

Для решения этой задачи мы будем использовать жадный подход, который заключается в том, чтобы каждый раз выбирать наибольшую возможную римскую цифру, которая помещается в num. Затем мы вычитаем значение этой цифры из num и добавляем соответствующий символ в итоговую строку.

Мы создаем массив digits с римскими цифрами 'I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M' и их значениями [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]. Обратите внимание, что некоторые числа записаны в виде комбинации двух символов (например, 'IV' для числа 4) для обработки случаев вычитания.

Затем мы проходим по массиву digits в обратном порядке (начиная с наибольшей цифры) и проверяем, если num больше или равно текущему значению. Если это верно, мы вычитаем значение из num и добавляем символ в итоговую строку, повторяя это до тех пор, пока num не станет равным нулю.

В конце мы получаем искомую римскую цифру.

Например, для числа 58, мы начинаем с наибольшего значения 50 (соответствующего символу 'L') и вычитаем это значение из num, получая num = 8. Затем мы проверяем, что num больше либо равно следующей цифре 9, и вычитаем ее из num, получая num = -1. Теперь итоговая строка будет 'LVIII'.

Сложность данного решения составляет O(1), так как количество доступных римских цифр ограничено и не зависит от величины числа num.


*/
function intToRoman(num) {
  let roman = "";
  const symbols = [
    { value: 1000, symbol: "M" },
    { value: 900, symbol: "CM" },
    { value: 500, symbol: "D" },
    { value: 400, symbol: "CD" },
    { value: 100, symbol: "C" },
    { value: 90, symbol: "XC" },
    { value: 50, symbol: "L" },
    { value: 40, symbol: "XL" },
    { value: 10, symbol: "X" },
    { value: 9, symbol: "IX" },
    { value: 5, symbol: "V" },
    { value: 4, symbol: "IV" },
    { value: 1, symbol: "I" },
  ];

  for (const symbol of symbols) {
    while (num >= symbol.value) {
      roman += symbol.symbol;
      num -= symbol.value;
    }
  }

  return roman;
}
